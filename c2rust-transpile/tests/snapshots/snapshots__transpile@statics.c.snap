---
source: c2rust-transpile/tests/snapshots.rs
expression: cat tests/snapshots/statics.rs
input_file: c2rust-transpile/tests/snapshots/statics.c
---
#![allow(
    dead_code,
    non_camel_case_types,
    non_snake_case,
    non_upper_case_globals,
    path_statements,
    unsafe_op_in_unsafe_fn,
    unused_assignments,
    unused_mut,
    unused_unsafe,
    unused_variables
)]
#![feature(extern_types)]
use core::ffi;
unsafe extern "C" {
    pub type sqlite3_mutex;
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct S {
    pub i: ffi::c_int,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct fn_ptrs {
    pub v: *mut ffi::c_void,
    pub fn1: Option<unsafe extern "C" fn() -> ffi::c_int>,
    pub fn2: Option<unsafe extern "C" fn(ffi::c_int) -> ffi::c_int>,
}
unsafe impl Sync for fn_ptrs {}
static fresh0: S = {
    let mut init = S { i: 5 };
    init
};
static global_static_const_ref_struct: Pointer<S> = Pointer(&raw const fresh0);
#[unsafe(no_mangle)]
pub static fns: fn_ptrs = {
    let mut init = fn_ptrs {
        v: 0 as *const ffi::c_void as *mut ffi::c_void,
        fn1: None,
        fn2: None,
    };
    init
};
#[unsafe(no_mangle)]
pub static mut p: Pointer<fn_ptrs> = unsafe { Pointer(&raw const fns as *const fn_ptrs) };
unsafe extern "C" fn other_c_to_i(mut c: ffi::c_char) -> ffi::c_int {
    let mut null_var: *mut ffi::c_int = 0 as *mut ffi::c_int;
    return c as ffi::c_int;
}
#[unsafe(no_mangle)]
pub static mut global_fn: Option<unsafe extern "C" fn(ffi::c_char) -> ffi::c_int> =
    unsafe { Some(other_c_to_i as unsafe extern "C" fn(ffi::c_char) -> ffi::c_int) };
static mut unixBigLock: PointerMut<sqlite3_mutex> =
    PointerMut(0 as *const sqlite3_mutex as *mut sqlite3_mutex);
#[unsafe(no_mangle)]
pub unsafe extern "C" fn static_length() {}
#[derive(Copy, Clone)]
#[repr(transparent)]
pub struct PointerMut<T: ?Sized>(pub *mut T);
unsafe impl<T> Sync for PointerMut<T> where T: Copy + Clone {}
#[derive(Copy, Clone)]
#[repr(transparent)]
pub struct Pointer<T: ?Sized>(pub *const T);
unsafe impl<T> Sync for Pointer<T> where T: Copy + Clone {}
