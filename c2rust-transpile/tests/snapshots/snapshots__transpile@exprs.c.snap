---
source: c2rust-transpile/tests/snapshots.rs
expression: cat tests/snapshots/exprs.rs
input_file: c2rust-transpile/tests/snapshots/exprs.c
---
#![allow(
    dead_code,
    mutable_transmutes,
    non_camel_case_types,
    non_snake_case,
    non_upper_case_globals,
    path_statements,
    unsafe_op_in_unsafe_fn,
    unused_assignments,
    unused_mut,
    unused_unsafe,
    unused_variables
)]
use core::ffi;
unsafe extern "C" {
    fn puts(str: *const ffi::c_char) -> ffi::c_int;
}
unsafe extern "C" fn side_effect() -> ffi::c_int {
    puts(c"the return of side effect".as_ptr());
    return 10 as ffi::c_int;
}
#[unsafe(no_mangle)]
pub unsafe extern "C" fn unary_without_side_effect() {
    let mut i: ffi::c_int = 5 as ffi::c_int;
    -i;
    i;
    !i;
    (i == 0) as ffi::c_int;
    &raw mut i;
    i;
    i += 1;
    i -= 1;
    i -= 1;
    i += 1;
}
#[unsafe(no_mangle)]
pub unsafe extern "C" fn unary_with_side_effect() {
    let mut arr: [*mut ffi::c_char; 1] = [0 as *mut ffi::c_char];
    -side_effect();
    side_effect();
    !side_effect();
    (side_effect() == 0) as ffi::c_int;
    &raw const *c"".as_ptr().offset(::core::mem::transmute::<
        unsafe extern "C" fn() -> ffi::c_int,
        unsafe extern "C" fn() -> ffi::c_int,
    >(side_effect)() as isize) as *const ffi::c_char;
    *arr[side_effect() as usize];
    arr[side_effect() as usize] = (arr[side_effect() as usize]).offset(1);
    arr[side_effect() as usize] = (arr[side_effect() as usize]).offset(-1);
    arr[side_effect() as usize] = (arr[side_effect() as usize]).offset(1);
    arr[side_effect() as usize] = (arr[side_effect() as usize]).offset(-1);
}
