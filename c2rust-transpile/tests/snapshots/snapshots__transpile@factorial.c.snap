---
source: c2rust-transpile/tests/snapshots.rs
expression: cat tests/snapshots/factorial.rs
input_file: c2rust-transpile/tests/snapshots/factorial.c
---
#![allow(
    dead_code,
    mutable_transmutes,
    non_camel_case_types,
    non_snake_case,
    non_upper_case_globals,
    path_statements,
    unsafe_op_in_unsafe_fn,
    unused_assignments,
    unused_mut,
    unused_unsafe,
    unused_variables
)]
use core::ffi;
#[unsafe(no_mangle)]
pub unsafe extern "C" fn factorial(mut n: ffi::c_ushort) -> ffi::c_ushort {
    let mut result: ffi::c_ushort = 1 as ffi::c_ushort;
    let mut i: ffi::c_ushort = 1 as ffi::c_ushort;
    while (i as ffi::c_int) < n as ffi::c_int {
        result = (result as ffi::c_int * i as ffi::c_int) as ffi::c_ushort;
        i = i.wrapping_add(1);
    }
    return result;
}
