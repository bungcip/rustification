---
source: c2rust-transpile/tests/snapshots.rs
expression: cat tests/snapshots/alloca.rs
input_file: c2rust-transpile/tests/snapshots/alloca.c
---
#![allow(
    dead_code,
    non_camel_case_types,
    non_snake_case,
    non_upper_case_globals,
    path_statements,
    unsafe_op_in_unsafe_fn,
    unused_assignments,
    unused_mut,
    unused_unsafe,
    unused_variables
)]
use core::ffi;
#[unsafe(no_mangle)]
pub static mut TRUE: ffi::c_int = 1 as ffi::c_int;
#[unsafe(no_mangle)]
pub unsafe extern "C" fn alloca_sum(mut val1: ffi::c_int, mut val2: ffi::c_int) -> ffi::c_int {
    let mut alloca_allocations: Vec<Vec<u8>> = Vec::new();
    let mut alloca1: *mut ffi::c_int = 0 as *mut ffi::c_int;
    let mut alloca2: *mut ffi::c_int = 0 as *mut ffi::c_int;
    if TRUE != 0 {
        alloca_allocations.push(::std::vec::from_elem(
            0,
            ::core::mem::size_of::<ffi::c_int>() as usize,
        ));
        alloca1 = alloca_allocations.last_mut().unwrap().as_mut_ptr() as *mut ffi::c_int;
        *alloca1 = val1;
    }
    if TRUE != 0 {
        alloca_allocations.push(::std::vec::from_elem(
            0,
            ::core::mem::size_of::<ffi::c_int>() as usize,
        ));
        alloca2 = alloca_allocations.last_mut().unwrap().as_mut_ptr() as *mut ffi::c_int;
        *alloca2 = val2;
    }
    return *alloca1 + *alloca2;
}
